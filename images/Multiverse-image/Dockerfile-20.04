FROM jupyter/minimal-notebook:ubuntu-20.04

USER root

# Zero interaction while installing or upgrading the system via apt, see https://bobcares.com/blog/debian_frontendnoninteractive-docker/
ENV DEBIAN_FRONTEND=noninteractive
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

RUN apt-get update && apt-get upgrade -y

RUN apt-get install -y software-properties-common curl 
RUN add-apt-repository ppa:deadsnakes/ppa && apt-get update && apt-get install -y python3.10-dev

# Set locale (https://docs.ros.org/en/foxy/Installation/Ubuntu-Install-Debians.html)
RUN apt-get install locales
RUN locale-gen en_US en_US.UTF-8
RUN update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
RUN LANG=en_US.UTF-8

RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add -
RUN add-apt-repository ppa:ubuntu-toolchain-r/test
RUN apt-get update && apt-get install -y ros-noetic-desktop-full python3-catkin-tools

RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN add-apt-repository universe
RUN apt-get update && apt-get install -y ros-foxy-desktop ros-dev-tools

# Install additional packages for ROS1
RUN apt-get install -y \
    ros-noetic-xacro \
    ros-noetic-rviz \
    ros-noetic-joint-trajectory-controller \
    ros-noetic-rqt-robot-steering \
    ros-noetic-rqt-joint-trajectory-controller \
    ros-noetic-joint-state-controller \
    ros-noetic-joint-state-publisher-gui \
    ros-noetic-position-controllers \
    ros-noetic-velocity-controllers \
    ros-noetic-effort-controllers \
    ros-noetic-gripper-action-controller \
    ros-noetic-dwa-local-planner \
    ros-noetic-cob-gazebo-objects \
    ros-noetic-map-server \
    ros-noetic-move-base

# Install additional packages for ROS2
RUN apt-get install -y \
    ros-foxy-xacro \
    ros-foxy-rviz2 \
    ros-foxy-joint-trajectory-controller \
    ros-foxy-rqt-robot-steering \
    ros-foxy-joint-state-controller \
    ros-foxy-joint-state-publisher-gui \
    ros-foxy-position-controllers \
    ros-foxy-velocity-controllers \
    ros-foxy-effort-controllers \
    ros-foxy-gripper-controllers

RUN useradd -m --uid 7593 multiverse
RUN conda create -y --name multiverse python=3.10
RUN chown -R multiverse /opt/conda
RUN chown -R multiverse /home/jovyan
SHELL ["/bin/bash", "-c"]
RUN echo "export PATH=$PATH:/home/jovyan/.local/bin" >> ~/.bashrc
RUN echo "conda activate multiverse" >> ~/.bashrc

COPY Multiverse /home/Multiverse
RUN chown -R multiverse /home/Multiverse

USER multiverse
WORKDIR /home/Multiverse

RUN conda run -n multiverse pip install -U pip build setuptools
RUN conda run -n multiverse pip install -r /home/Multiverse/Multiverse-Launch/requirements.txt
RUN conda run -n multiverse pip install -r /home/Multiverse/Multiverse-Launch/src/multiverse_connectors/multiverse_simulators_connector/src/mujoco_connector/requirements.txt
RUN conda run -n multiverse pip install -r /home/Multiverse/Multiverse-Launch/src/multiverse_connectors/multiverse_ros_connector/requirements.txt
RUN conda run -n multiverse pip install -r /home/Multiverse/Multiverse-Utilities/requirements.txt
RUN conda run -n multiverse pip install -r /home/Multiverse/Multiverse-Parser/requirements.txt

RUN (cd Multiverse-Parser; conda run -n multiverse pip install pyside6 pyopengl jinja2; PYTHON_EXECUTABLE=/opt/conda/envs/multiverse/bin/python3 ./setup.sh; conda run -n multiverse pip install -e .)
RUN bash -c "source /opt/conda/etc/profile.d/conda.sh && \
             conda activate multiverse && \
             source /opt/ros/noetic/setup.bash && \
             cd Multiverse-Launch/src/multiverse_connectors/multiverse_ros_connector/ros_ws/multiverse_ws && \
             catkin build"

# --- Install VNC server and XFCE desktop environment --- #
USER root
RUN apt-get -y -qq update && apt-get -y -qq install \
    dbus-x11 \
    firefox \
    xfce4 \
    xfce4-panel \
    xfce4-session \
    xfce4-settings \
    xorg \
    gnome-shell \
    gnome-session \
    gnome-terminal \
    xubuntu-icon-theme \
    fonts-dejavu \
    # Disable the automatic screenlock since the account password is unknown
    && apt-get -y -qq remove xfce4-screensaver \
    # chown $HOME to workaround that the xorg installation creates a
    # /home/jovyan/.cache directory owned by root
    # Create /opt/install to ensure it's writable by pip
    && mkdir -p /opt/install \
    && chown -R $NB_UID:$NB_GID $HOME /opt/install

# Install a VNC server, either TigerVNC (default) or TurboVNC
ENV PATH=/opt/TurboVNC/bin:$PATH
RUN echo "Installing TurboVNC"; \
    # Install instructions from https://turbovnc.org/Downloads/YUM
    wget -q -O- https://packagecloud.io/dcommander/turbovnc/gpgkey | \
    gpg --dearmor >/etc/apt/trusted.gpg.d/TurboVNC.gpg; \
    wget -O /etc/apt/sources.list.d/TurboVNC.list https://raw.githubusercontent.com/TurboVNC/repo/main/TurboVNC.list; \
    apt-get -y -qq update; \
    apt-get -y -qq install \
    turbovnc

RUN conda install -y websockify
RUN pip install jupyter-remote-desktop-proxy jupyterlab
ENV DISPLAY=:1